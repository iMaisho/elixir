
# Ajout d’un filtre dynamique dans une LiveView Phoenix

LiveView permet de réagir à la saisie utilisateur sans recharger la page. Nous allons ici ajouter un champ de recherche **dynamique** pour filtrer une liste en temps réel, sans utiliser de `changeset`, ni de formulaire complexe.



## Mise en place du filtre

Pour commencer, on prépare la LiveView en initialisant un formulaire très simple. On ne passe pas par un changeset, mais par une simple map contenant une clé `"filter"` vide. Cette donnée servira à construire un `Phoenix.HTML.Form` avec la fonction `to_form/2`.

```elixir
assign(:form, to_form(%{"filter" => ""}, as: :filter_form))
```

Cela permet d’avoir un formulaire compatible avec les composants Phoenix `<.simple_form>` et `<.input>`. On en profite également pour charger la liste des éléments à afficher, ici des conversations, via notre fonction maison `Chats.list_intranet_conversation_with_preload()`.



## Création du champ de recherche

Dans notre template `.heex`, on affiche le champ de recherche à l’intérieur d’un composant `<.simple_form>`. On utilise l’attribut `phx-change="filter"` pour déclencher une fonction à chaque modification du champ.

```elixir
<.simple_form for={@form} phx-change="filter">
  <.input field={@form[:filter]} label="Recherche" />
</.simple_form>
```

À chaque frappe de l’utilisateur, l’événement `"filter"` sera envoyé à la LiveView, qui pourra alors mettre à jour dynamiquement le contenu affiché. Cela évite toute relecture de la page.



## Gérer l’événement de filtrage

Dans la LiveView, on implémente une fonction `handle_event/3` pour réagir à l’événement `"filter"`. On commence par récupérer la valeur tapée, puis on recharge toutes les données (conversations), avant de les filtrer avec `Enum.filter`.

On met ensuite à jour deux choses :

* le `:form`, pour conserver la saisie dans le champ ;
* le `:stream`, pour rafraîchir la liste affichée.

```elixir
{:noreply,
 socket
 |> assign(:form, to_form(%{"filter" => query}, as: :filter_form))
 |> stream(:conversations, filtered_conversations, reset: true)}
```

Le `reset: true` permet de remplacer l'intégralité de la liste au lieu de faire un patch partiel.



## Chargement correct des données

Quand on filtre des données avec `Enum.filter`, il faut s’assurer que toutes les **associations Ecto** sont déjà préchargées. Sinon, on risque une erreur `Ecto.Association.NotLoaded`. On appelle donc une fonction qui effectue un `preload(:intranet_messages)` ou toute autre association nécessaire avant de lancer le filtrage.



## Vérification côté client

Pour que tout fonctionne en temps réel, il faut s’assurer que le WebSocket de Phoenix LiveView est bien actif. Dans le fichier `assets/js/app.js`, on doit avoir :

```js
let liveSocket = new LiveSocket("/live", Socket, {...})
```

Et dans le layout HTML (`root.html.heex`), il faut vérifier que le script JavaScript est bien inclus. Si le champ de recherche déclenche un rechargement de page, c’est probablement que le JS LiveView n’est pas initialisé correctement.


## Bonnes pratiques

* Ne jamais mélanger `@filter` et `@form[:filter]` dans un même template.
* Toujours construire le formulaire avec `to_form(...)`, même pour une map simple.
* Pour une recherche déclenchée manuellement, on peut ajouter un bouton avec `phx-submit`.



# Gérer le filtre côté serveur avec Ecto

Plutôt que de charger toutes les conversations en mémoire pour ensuite les filtrer avec `Enum.filter`, il est bien plus efficace de **filtrer directement en base de données**, grâce à Ecto. Cela réduit la charge serveur et accélère les réponses, surtout quand les données sont nombreuses.

Pour cela, on définit une fonction dédiée dans le module de contexte `Chats.ex`, par exemple :

```elixir
  def list_intranet_conversations_filtered(filter) do
    filter = String.trim(filter)

    # query =
    #   from(c in IntranetConversation,
    #     where: ilike(c.conversation_topic, ^"%#{filter}%")
    #   )

    IntranetConversation
    |> where([ic], ilike(ic.conversation_topic, ^"%#{filter}%"))
    |> Repo.all()
    |> Repo.preload(:intranet_messages)
  end
```

Ici, `ilike/2` permet de faire une recherche **insensible à la casse**. On utilise une interpolation avec le caractère `%` pour faire une recherche partielle (*"contient"*) sur le champ `conversation_topic`. Ensuite, on précharge les messages associés avec `Repo.preload/2`.



## Avantages de cette approche

* ✅ Recherche plus rapide et scalable.
* ✅ Moins de mémoire consommée côté Elixir.
* ✅ Moins de logique métier embarquée dans la LiveView : tout est délégué au contexte.



Il suffit ensuite d'appeler cette fonction dans le `handle_event("filter", ...)` de ta LiveView `index.ex`, en lui passant le contenu du champ de recherche :

```elixir
  def handle_event("validate", %{"filter_form" => %{"filter" => value}}, socket) do
    filtered = Chats.list_intranet_conversations_filtered(value)
    # socket.assigns.intranet_conversation_list
    # |> Enum.filter(fn conv ->
    #   String.contains?(String.downcase(conv.conversation_topic), String.downcase(value))
    # end)

    {:noreply,
     socket
     |> assign(:form, to_form(%{"filter" => value}, as: :filter_form))
     |> stream(:intranet_conversations, filtered, reset: true)}
  end```
